#!/command/with-contenv bashio
# ==============================================================================
# Home Assistant Community Add-on: Tailscale
# Runs after the machine has been logged in into the Tailscale network
# ==============================================================================
declare -a addresses
declare -a routes
declare route
declare ipinfo
declare tags

function list::contains() {
  local list=${1}
  local item=${2}

  if [[ "${list}" =~ (^|[[:space:]])"${item}"($|[[:space:]]) ]]; then
    return 0
  else
    return 1
  fi
}

# Find interfaces and matching addresses from which we can extract routes to be advertised
for interface in $(bashio::network.interfaces); do
  addresses+=($(bashio::network.ipv4_address "${interface}"))
  addresses+=($(bashio::network.ipv6_address "${interface}"))
done

# Extract routes to be advertised
routes=()
for address in "${addresses[@]}"; do
  if bashio::var.has_value "${address}"; then
    # Skip local link addresses
    if [[ "${address:0:6}" == "fe80::" ]] || [[ "${address:0:8}" == "169.254." ]];
    then
      continue
    fi

    # Skip if forwarding for the address family is disabled
    if [[ "${address}" =~ .*:.* ]];
    then
      [[ $(</proc/sys/net/ipv6/conf/all/forwarding) -eq 0 ]] && continue
    else
      [[ $(</proc/sys/net/ipv4/ip_forward) -eq 0 ]] && continue
    fi

    # Extract unique routes
    ipinfo="$(/usr/bin/ipcalc --json "${address}")"
    route=$(bashio::jq "${ipinfo}" '.NETWORK + "/" + .PREFIX')
    if ! list::contains "${routes[*]}" "${route}"; then
      routes+=("${route}")
    fi
  fi
done

# Get configured tags
tags=$(bashio::config "tags//[] | join(\",\")" "")

# Wait for socket to be available
while ! bashio::fs.socket_exists "/var/run/tailscale/tailscaled.sock";
do
  sleep 1
done

# Wait for the network to be available
while true;
do
  if /opt/tailscale status --json --peers=false --self=false \
    | jq --exit-status '.BackendState == "Running" or .BackendState == "NeedsLogin"' > /dev/null;
  then
    IFS=","
    /opt/tailscale up \
      --hostname "$(bashio::info.hostname)" \
      --advertise-exit-node \
      --accept-routes \
      --advertise-routes="${routes[*]}" \
      --advertise-tags="${tags}"
    break
  fi
  # Well... wait a bit more
  sleep 2
done

# Wait for the network to be available and logged in
while true;
do
  if /opt/tailscale status --json --peers=false --self=false \
    | jq --exit-status '.BackendState == "Running"' > /dev/null;
  then
    break
  fi
  # Well... wait a bit more
  sleep 2
done

bashio::log.info "Tailscale is running, configuring Funnel..."

declare ha_service_protocol
declare domain

# Remove previously configured proxy first, because the configuration is persistent between reboots
/opt/tailscale serve --remove / &> /dev/null

# Checking if SSL is used
if bashio::var.true "$(bashio::core.ssl)"; then
  ha_service_protocol="https"
else
  ha_service_protocol="http"
fi

# Check if Tailscale HTTPS is enabled
if ! /opt/tailscale status --self=true --peers=false --json \
  | jq -rce ".CertDomains[0]" > /dev/null;
then
  bashio::log.warning
  bashio::log.warning "Can't get your Tailscale domain, is HTTPS support enabled?"
  bashio::log.warning "See the Prerequisites chapter in the add-on's Documentation."
  bashio::log.warning
  bashio::log.warning ">>> THEN RESTART THIS ADD-ON!!! <<<"
  bashio::log.warning
  bashio::exit.ok
fi

# Configure Tailscale proxy
domain=$(/opt/tailscale status --self=true --peers=false --json | jq -rc ".CertDomains[0]")
/opt/tailscale serve / proxy ${ha_service_protocol}://localhost:$(bashio::core.port)
bashio::log.info "Your Home Assistant instance is available within your Tailnet VPN at:"
bashio::log.info "  https://${domain}"

# Check if funnel is available
if ! funnel_available=$(/opt/tailscale serve funnel off 2>&1); then
  bashio::log.warning
  bashio::log.warning "${funnel_available}"
  bashio::log.warning "Funnel is not available, is Funnel feature enabled?"
  bashio::log.warning "See the Required Tailscale configuration chapter in the add-on's Documentation."
  bashio::log.warning
  bashio::log.warning ">>> THEN RESTART THIS ADD-ON!!! <<<"
  bashio::log.warning
  bashio::exit.ok
fi

# Set up Funnel
if $(/opt/tailscale serve funnel on); then
  bashio::log.info "Your Homeassistant instance is publicly available on the internet at:"
  bashio::log.info "  https://${domain}"
fi
